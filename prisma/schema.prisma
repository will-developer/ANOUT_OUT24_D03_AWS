// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  password      String
  status        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  inactivatedAt DateTime?

  @@map("user")
}

model Client {
  id            Int       @id @default(autoincrement())
  name          String
  cpf           String    @unique
  birthDate     DateTime
  email         String    @unique
  phone         String
  status        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  inactivatedAt DateTime?
  orders        Order[]

  @@map("client")
}

model Car {
  id            Int       @id @default(autoincrement())
  brand         String
  model         String
  plate         String    @unique
  year          Int
  km            Int
  dailyPrice    Float
  status        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  inactivatedAt DateTime?
  items         CarItem[]
  orders        Order[]

  @@map("car")
}

model CarItem {
  id    Int    @id @default(autoincrement())
  name  String
  carId Int
  car   Car    @relation(fields: [carId], references: [id])

  @@map("car_item")
}

model Order {
  id          Int       @id @default(autoincrement())
  startDate   DateTime
  endDate     DateTime
  cep         String
  uf          String
  city        String
  rentalFee   Float
  totalAmount Float
  closeDate   DateTime?
  lateFee     Float?
  statusOrder String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  canceledAt  DateTime?
  clientId    Int
  client      Client    @relation(fields: [clientId], references: [id])
  carId       Int
  car         Car       @relation(fields: [carId], references: [id])

  @@map("order")
}
